import { Page } from "@playwright/test";
import { allure } from "allure-playwright";

/**
 * –ü—Ä–æ–±—É–µ—Ç —Å–ø–∞—Ä—Å–∏—Ç—å JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
 */
function tryParseJson(input: string | null): any {
  if (!input) return null;
  try {
    return JSON.parse(input);
  } catch {
    return input;
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ HTTP-—Å—Ç–∞—Ç—É—Å—É
 */
function statusToEmoji(status: number): string {
  switch (true) {
    // ‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (2xx)
    case status === 200:
      return "‚úÖ";
    case status === 201:
      return "üÜï";
    case status >= 200 && status < 300:
      return "üü©";

    // üü° –†–µ–¥–∏—Ä–µ–∫—Ç—ã (3xx)
    case status === 301 || status === 302:
      return "üîÑ";
    case status >= 300 && status < 400:
      return "üü°";

    // ‚ùå –û—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (4xx)
    case status === 400:
      return "üö´";
    case status === 401:
      return "üîê";
    case status === 403:
      return "üö´üö´üö´";
    case status === 404:
      return "üß≠";
    case status >= 400 && status < 500:
      return "‚ùå";

    // üî• –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ (5xx)
    case status === 500:
      return "üí•";
    case status >= 500 && status < 600:
      return "üî•";

    // ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    default:
      return "‚ö†Ô∏è";
  }
}

export function wrapNetworkActions(page: Page): void {
  // --- –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º page.waitForResponse ---
  const originalWaitForResponse = page.waitForResponse.bind(page);
  page.waitForResponse = async function (urlOrPredicate, options?) {
    const urlDescription =
      typeof urlOrPredicate === "string" ? urlOrPredicate : "<–ø—Ä–µ–¥–∏–∫–∞—Ç>";

    return await allure.step(
      `üîç –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: ${urlDescription}`,
      async () => {
        const response = await originalWaitForResponse(urlOrPredicate, options);
        const request = response.request();

        const method = request.method();
        const url = request.url();
        const status = response.status();
        const statusText = response.statusText();
        const emoji = statusToEmoji(status);

        // üß© –ï–¥–∏–Ω–∞—è –∑–∞–ø–∏—Å—å: –ú–µ—Ç–æ–¥ + URL + –°—Ç–∞—Ç—É—Å
        const stepName = `üì° ${method} ${url} ‚Üí ${emoji} ${status} ${statusText}`;
        await allure.step(stepName, async () => {
          // üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
          allure.attachment(
            "üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            JSON.stringify(request.headers(), null, 2),
            "application/json"
          );

          // üìÑ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
          const postData = await request.postData();
          if (postData) {
            const parsedPostData = tryParseJson(postData);
            allure.attachment(
              "üìÑ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞",
              JSON.stringify(parsedPostData, null, 2),
              "application/json"
            );
          }

          // üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
          allure.attachment(
            "üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞",
            JSON.stringify(response.headers(), null, 2),
            "application/json"
          );

          // üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
          const responseBody = await response.text();
          const parsedResponseBody = tryParseJson(responseBody);
          allure.attachment(
            "üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞",
            JSON.stringify(parsedResponseBody, null, 2),
            "application/json"
          );
        });

        return response;
      }
    );
  };

  // --- –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º page.route ---
  const originalRoute = page.route.bind(page);
  page.route = async function (url, handler) {
    const expectedUrl = typeof url === "string" ? url : "<–ø—Ä–µ–¥–∏–∫–∞—Ç>";
    return await originalRoute(url, async (route, request) => {
      const actualUrl = request.url();
      const isMatched = typeof url === "string" ? actualUrl === url : true;

      if (!isMatched) {
        return await handler(route, request);
      }

      const method = request.method();
      const stepName = `üõ† –ú–æ–∫ –∑–∞–ø—Ä–æ—Å–∞: ${actualUrl}`;

      return await allure.step(stepName, async () => {
        // üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
        allure.attachment(
          "üìù –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
          JSON.stringify(request.headers(), null, 2),
          "application/json"
        );

        // üìÑ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        const postData = await request.postData();
        if (postData) {
          const parsedPostData = tryParseJson(postData);
          allure.attachment(
            "üìÑ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞",
            JSON.stringify(parsedPostData, null, 2),
            "application/json"
          );
        }

        // üîÅ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º route.fulfill
        const originalFulfill = route.constructor.prototype.fulfill;

        route.fulfill = async function (response) {
          const status = response.status || 200;
          const statusText = response.statusText || "OK";
          const emoji = statusToEmoji(status);

          // üß© –ï–¥–∏–Ω–∞—è –∑–∞–ø–∏—Å—å: –º–µ—Ç–æ–¥ + URL + —Å—Ç–∞—Ç—É—Å
          const fullStatusStep = `üì° ${method} ${actualUrl} ‚Üí ${emoji} ${status} ${statusText}`;
          return await allure.step(fullStatusStep, async () => {
            // üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
            allure.attachment(
              "üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞",
              JSON.stringify(response.headers || {}),
              "application/json"
            );

            // üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            const body =
              typeof response.body === "string"
                ? response.body
                : response.body?.toString() || "";

            const parsedResponseBody = tryParseJson(body);

            allure.attachment(
              "üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞",
              JSON.stringify(parsedResponseBody, null, 2),
              "application/json"
            );

            return await originalFulfill.call(this, response);
          });
        };

        return await handler(route, request);
      });
    });
  };
}
